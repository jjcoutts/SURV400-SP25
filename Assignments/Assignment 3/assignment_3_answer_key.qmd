---
title: "SURV400: Assignment 3"
format: html
editor: visual
---

Please complete this assignment to the best of your ability. When you are done, render the document and upload the .docx file to the submission portal on ELMS.

## Data Types

In this section, we're going to practice working with and creating data of different data types.

### Numeric/Integer Data

```{r}
# create a vector of integers with the numbers 0 to 100
numbers <- 1:100
numbers2 <- c(1:100) # another option
numbers3 <- seq(from = 1, to = 100, by = 1) # another option

# create a vector of the number 1 repeated 1000 times. Check the length of this to verify it is correct.
lottaones = rep(1,1000)
length(lottaones)

# calculate the mean of the following vector
vec = c(1:10, rep(1,10), seq(1, 5, .4), 31:45)
mean(vec)
```

What would be the class of the following vector: c(1L, 2L, 3.5L)

### Character Data

```{r}
# create a vector with 3 letters and 1 sentence, each as individual elements. What is the length of this vector? 
letters <- c("a","B","I like dogs.","D")
length(letters)

# Create a vector called cat with the word cat in it and a vector called dog with the word dog in it. Compare cat > dog. What happens and why? 
cats <- "cat"
dogs <- "dog" 
cats > dogs
# this statement is FALSE because it's based on the first letter of the word (the CONTENTS of the object, not the object name itself)
```

### Boolean Data

```{r}
# create a condition that evaluates as true
"dogs" == "dogs" # true because they're the same character data

# create a condtiion that evaluates as false
TRUE == FALSE # false because they're different logical values

# create a condition with an OR statement that evaluates to TRUE.
numbs = 1:100
min(numbs) < 50 | max(numbs) < 50 # true because at least one of the two - the minimum - is less than 50

# create a condition with an AND statement that evaluates to FALSE.
min(numbs) < 50 & max(numbs) < 50 # false because only the minimum value is less than 50
```

### Factor Data

```{r}
sizes <- c("small","medium", "large")
# turn the above vector into a factor with ordered levels.
sizes <- factor(sizes, levels = c("small","medium","large"), ordered=TRUE)

countries = c("US","Sweden","China","Egypt")
# turn the above vector into a factor with unordered levels 
countries = factor(countries, levels = unique(countries), ordered = FALSE) # unique(countries) will pull all unique values in the countries vector so we're avoiding repeats. This works well here because there's no order to the levels of the factor. 
```

### General

```{r}
# check the class of the below vector
messy <- c(1L, TRUE, "0", 125)
class(messy) # it is character because there is one character value
```

## Data Structures

### Vectors

```{r}
# create vector with the INTEGERS 1 through 100 
int_vec = c(1L:100L)
class(int_vec)

# divde this vector by 2 and check the resulting data type
class(int_vec/2) # this is numeric because there are decimal values. (Every odd number divided by 2)
```

### Matrices

```{r}
# create a 2x3 matrix with the numbers 1 through 6 in it going from left to right (1, 2, 3 in row 1, 4, 5, and 6 in row 2)
test = matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE); test # we need byrow = TRUE here because it will fill columns then rows by default

# multiply all elements in the matrix by 2 in a single operation
test*2
```

### Data Frames

```{r}
# create a data frame with three columnns named numbers, numbers_squared, and numbers_doubled. The first column should be the numbers 1 through 10, the second and third columns should be those numbers squared and doubled, respectively. 
df = data.frame(numbers = 1:10, numbers_squared = (1:10)^2, numbers_doubled = (1:10)*2)
df
# create a fourth column in your data frame called ratio and make it the first column divided by the second column. 
df$ratio = df$numbers/df$numbers_squared
df$ratio2 = df[,1]/df[,2] # a second way to do it
df$ratio3 = df[,"numbers"]/df[,"numbers_squared"] # a third way to do it
# all of the above are equally good solutions to indexing the data frame

df # verify these do the same thing

all(df$ratio == df$ratio2) & all(df$ratio2 == df$ratio3)  # verify these are equivalent by using the all() command, which checks whether all values are equal (i.e., all are true)
```

## Loops

```{r}
# loop through the COLUMNS of the data frame above and calculate the standard deviation of each row
sd_vec <- rep(NA, ncol(df)) # make this the same length of the number of columns of the data frame
for(i in 1:ncol(df)){ # this loops through the number of columns of the data frame, so i will be set to 1 through 6, incremented by 1
  sd_vec[i] <- sd(df[,i]) # this will assign the standard deviation of the ith column of the data frame to the ith element of the standard deviation vector. 
}
sd_vec

# create a for loop that prints the expression "HELLO WORLD!" the number of rows of the data frame above. 
for(i in 1:nrow(df)){
  print("HELLO WORLD!")
} # this will loop through the code 10 times and print hello world each time because i = 1, ..., 10

# create an empty results vector the number of rows of the data frame above and fill it with the numbers of the first column doubled. Compare it to the third column in your data frame.
res = rep(NA, nrow(df))
for(i in 1:nrow(df)){
  res[i] = df[i,1]*2
}

res == df[,3] # it worked! Note, this is less efficient than simply multiplying the values by 2 like we did when creating the data frame
```

## Working with Data

It is critical for us to be able to read in and manipulate data. Please follow the comments in the following code chunk to show your data wrangling skills.

```{r}
# read in the dataset "airquality" from R using the data() command. 
data(airquality)

# describe this dataset with a single line of code. 
summary(airquality) 

# plot two numeric variables of your choice to show you can do it
plot(airquality$Solar.R, airquality$Wind)

# read in the trauma.csv dataset on Jupyter
trauma <- read.table("trauma.csv", sep = ",", header =TRUE)
```

## Debugging

Below are lines of code, each with one error. Please fix them so this document renders!

```{r}
numbers = c(1:100) # issue: two equals signs instead of one
halved = numbers/2 # issue: numbers was capitalized here and not above
char = c("a","b","c","D") # issue: missing quotes around c
print(char) # issue: p in print was capitalized
df = data.frame(numbers = 1:3, letters = c("A","B","C")) # issue: used is.data.frame() instead of data.frame() to create data frame
ncol(df) == length(df) # this should be true # issue: it was missing a second equals sign
```

That's it! Please render and upload this document to ELMS.
